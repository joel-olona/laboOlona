{% extends 'dashboard/base.html.twig' %}

{% block body %}

<div class="container mt-5">
    <h2>Annonces</h2>
    <table class="table">
        <thead>
            <tr>
                <th class="id-column">ID</th>
                <th class="entreprise-col">Entreprise</th>
                <th class="titre-col">Titre</th>
                <th class="description-col">Description</th>
                <th class="status-col">Status</th>
                <th class="actions-col">Actions</th>
            </tr>
            <tr>
                <th><input type="text" id="filter-id" class="filter-input" data-column="0" placeholder="Rechercher par ID"></th>
                <th><input type="text" id="filter-entreprise" class="filter-input" data-column="1" placeholder="Rechercher par Entreprise"></th>
                <th><input type="text" id="filter-titre" class="filter-input" data-column="2" placeholder="Rechercher par Titre"></th>
                <th><input type="text" id="filter-description" class="filter-input" data-column="3" placeholder="Rechercher par Description"></th>
                <th></th>
                <th></th>
            </tr>
        </thead>

        <!-- Modal -->
<div class="modal fade" id="viewAnnonceModal" tabindex="-1" role="dialog" aria-labelledby="viewAnnonceModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="viewAnnonceModalLabel">Détails de l'annonce</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <!-- Ici, le contenu de l'annonce sera injecté -->
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Fermer</button>
      </div>
    </div>
  </div>
</div>
        <tbody>
            {% for annonce in annonces %}
                <tr>
                    <td class="id-column">{{ annonce.id }}</td>
                    <td>{{ annonce.entreprise.nom }}</td>
                    <td>{{ annonce.titre }}</td>
                    <td>{{ annonce.description|length > 50 ? annonce.description|slice(0, 50) ~ '...' : annonce.description }}</td>
                    <td>
                        <select name="status" class="form-control" data-id="{{ annonce.id }}">
                            <option value="OPEN" {{ annonce.status == 'OPEN' ? 'selected' : '' }}>Ouvert</option>
                            <option value="CLOSED" {{ annonce.status == 'CLOSED' ? 'selected' : '' }}>Fermé</option>
                            <option value="FILLED" {{ annonce.status == 'FILLED' ? 'selected' : '' }}>Pourvu</option>
                        </select>
                    </td>
                    <td class="actions-col">
                        <button type="button" class="btn btn-primary btn-view-annonce" data-id="{{ annonce.id }}">Voir</button>
                        <a href="#" class="btn btn-danger btn-delete-annonce" data-id="{{ annonce.id }}">Supprimer</a>
                    </td>
                </tr>
            {% endfor %}
        </tbody>
    </table>
</div>

{% endblock %}

{% block javascripts %}
<script>
    document.addEventListener('DOMContentLoaded', () => {
    const filterInputs = document.querySelectorAll('.filter-input');
    filterInputs.forEach(input => {
        input.addEventListener('keyup', () => {
            const columnIndex = input.getAttribute('data-column');
            const filterValue = input.value.toLowerCase();
            const rows = document.querySelector('tbody').rows;
            for (const row of rows) {
                const cellValue = row.cells[columnIndex].textContent.toLowerCase();
                row.style.display = cellValue.includes(filterValue) ? '' : 'none';
            }
        });
    });
});

    document.addEventListener('DOMContentLoaded', () => {
    const csrfToken = document.querySelector('meta[name="csrf-token"]');
    if (!csrfToken) {
        console.error('CSRF token not found');
        return;
    }

    const csrfTokenValue = csrfToken.getAttribute('content');

    const updateStatus = async (annonceId, newStatus) => {
        try {
            const response = await fetch(`/dashboard/moderateur/ajax/status/annonce/${annonceId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest',
                    'X-CSRF-Token': csrfTokenValue
                },
                body: JSON.stringify({ status: newStatus })
            });

            if (!response.ok) {
                throw new Error('Network response was not ok ' + response.statusText);
            }

            const data = await response.json();

            if (data.status === 'success') {
                console.log('Statut mis à jour');
                document.getElementById('status-message').innerText = 'Statut mis à jour avec succès!';
            } else {
                console.error('Erreur lors de la mise à jour du statut', data);
                document.getElementById('status-message').innerText = 'Erreur lors de la mise à jour du statut';

            }
        } catch (error) {
            console.error('Erreur lors de la mise à jour du statut', error);
            document.getElementById('status-message').innerText = 'Erreur lors de la mise à jour du statut';

        }
    };

    document.querySelectorAll('select[name="status"]').forEach(select => {
        select.addEventListener('change', (event) => {
            event.preventDefault();
            const annonceId = select.getAttribute('data-id');
            const newStatus = select.value;
            updateStatus(annonceId, newStatus);
        });
    });

    // Code pour la suppression
    const deleteButtons = document.querySelectorAll('.btn-delete-annonce');
deleteButtons.forEach(button => {
    button.addEventListener('click', function(e) {
        console.log('Bouton de suppression cliqué'); // Ajoutez cette ligne
        e.preventDefault();
        const annonceId = button.getAttribute('data-id');

        if (confirm('Êtes-vous sûr de vouloir supprimer cette annonce ?')) {
            fetch(`/dashboard/moderateur/ajax/delete/annonce/${annonceId}`, {
                method: 'DELETE',
                headers: {
                    'Accept': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    button.closest('tr').remove();
                    alert('Annonce supprimée avec succès');
                } else {
                    console.error('Erreur lors de la suppression', data.error);
                    alert('La suppression a échoué');
                }
            })
            .catch(error => {
                console.error('Erreur lors de la suppression', error);
                alert('La suppression a échoué');
            });
        }
    });
});

    // Code pour l'affichage des détails
    const viewButtons = document.querySelectorAll('.btn-view-annonce');
    viewButtons.forEach(button => {
        button.addEventListener('click', function(e) {
            e.preventDefault();
            const annonceId = button.getAttribute('data-id');

            fetch(`/dashboard/moderateur/ajax/details/annonce/${annonceId}`, {
                method: 'GET',
                headers: {
                    'Accept': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest',
                },
            })
            .then(response => response.ok ? response.json() : Promise.reject('Network response was not ok ' + response.statusText))
            .then(data => {
                console.log(data);
            })
            .catch(error => {
                console.error('Erreur lors de la récupération des détails', error);
            });
        });
    });
});

</script>
{% endblock %}

{# {% block body %}

{% for annonce in annonces %}
    {% include "composants/table_annonce.html.twig" with {annonce: annonce} %}
{% endfor %}

{% endblock %} #}
