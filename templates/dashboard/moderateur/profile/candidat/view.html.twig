{% extends 'dashboard/base.html.twig' %}

{% block body %}
	<div class="container mt-5">
		<div class="row align-items-center">
			<div class="col-md-8">
				<h2 class="h3">
					Détails du Candidat :
					<span class="text-danger">{{ candidat.candidat.nom }}
						{{ candidat.candidat.prenom }}</span>
				</h2>
			</div>
			<div class="col-md-4">
				<form method="post" action="{{ path('change_status_candidat', {'uid': candidat.uid}) }}" class="d-flex justify-content-end">
					<select name="status" class="form-select form-select-lg bg-dark text-white" onchange="confirmChange(this)">
						<option value="PENDING" {{ candidat.status == 'PENDING' ? 'selected' : '' }}>En attente</option>
						<option value="VALID" {{ candidat.status == 'VALID' ? 'selected' : '' }}>Valide</option>
						<option value="FEATURED" {{ candidat.status == 'FEATURED' ? 'selected' : '' }}>Mis en avant</option>
						<option value="RESERVED" {{ candidat.status == 'RESERVED' ? 'selected' : '' }}>Vivier</option>
					</select>
				</form>
			</div>
		</div>

		<!-- Onglets -->
		<ul class="nav nav-tabs">
			<li class="nav-item">
				<a class="nav-link active" id="details-tab" data-bs-toggle="tab" href="#details">Résumé</a>
			</li>
			<li class="nav-item">
				<a class="nav-link" id="competences-tab" data-bs-toggle="tab" href="#competences">Comp. ({{ candidat.competences|length }})</a>
			</li>
			<li class="nav-item">
				<a class="nav-link" id="experiences-tab" data-bs-toggle="tab" href="#experiences">Exp. ({{ candidat.experiences|length }})</a>
			</li>
			<li class="nav-item">
				<a class="nav-link" id="candidatures-tab" data-bs-toggle="tab" href="#candidatures">Candidatures ({{ candidat.applications|length }})</a>
			</li>
			<li class="nav-item">
				<a class="nav-link" id="assignation-tab" data-bs-toggle="tab" href="#assignation">Assign. ({{ candidat.assignations|length }})</a>
			</li>
			<li class="nav-item">
				<a class="nav-link" id="cv-tab" data-bs-toggle="tab" href="#cv">CV / Autres infos</a>
			</li>
			<li class="nav-item">
				<a class="nav-link" id="email-tab" data-bs-toggle="tab" href="#email">
					<i class="bi h5 bi-envelope-at"></i>
				</a>
			</li>
		</ul>

		<!-- Contenu des onglets -->
		<div class="tab-content mt-3">
			{% include "dashboard/moderateur/profile/candidat/sections/details.html.twig" %}
			{% include "dashboard/moderateur/profile/candidat/sections/competences.html.twig" %}
			{% include "dashboard/moderateur/profile/candidat/sections/experiences.html.twig" %}
			{% include "dashboard/moderateur/profile/candidat/sections/candidatures.html.twig" %}
			{% include "dashboard/moderateur/profile/candidat/sections/assignation.html.twig" %}
			{% include "dashboard/moderateur/profile/candidat/sections/cv.html.twig" %}
			{% include "dashboard/moderateur/profile/candidat/sections/email.html.twig" %}
		</div>
		<a href="javascript:history.back()" class="btn btn-primary rounded-pill my-3 px-5">
			<i class="mx-2 bi bi-arrow-left"></i>Retour
		</a>
        <button type="button" id="submitButton" class="btn btn-success rounded-pill my-3 px-5">
            <i class="mx-2 bi bi-save"></i>Enregistrer
        </button>
	</div>
    <!-- Modal -->
        <div class="modal fade" id="assignationModalAdd" tabindex="-1" aria-labelledby="assignationModalAddLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="assignationModalAddLabel">Ajouter une assignation à {{ candidat.candidat.nom }} {{ candidat.candidat.prenom }}</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    {{ form_start(formAssignation, {'attr':{'id':'formAssignation'}})  }}
                    {{form_row(formAssignation.entreprise)}}
                    {{form_row(formAssignation.jobListing)}}
                        <div class="row mb-3">
                            <div class="col-12 col-lg-4">
                                <span class="text-muted small">Type</span>
                                {{ form_widget(formAssignation.forfaitAssignation.typeForfait, {'attr': {'class': 'form-control'}}) }}
                            </div>
                            <div class="col-12 col-lg-4">
                                <span class="text-muted small">Montant</span>
                                {{ form_widget(formAssignation.forfaitAssignation.montant, {'attr': {'class': 'form-control'}}) }}
                            </div>
                            <div class="col-12 col-lg-4">
                                <span class="text-muted small">Devise</span>
                                {{ form_widget(formAssignation.forfaitAssignation.currency, {'attr': {'class': 'form-control'}}) }}
                            </div>
                        </div>
                    {{form_row(formAssignation.status)}}
                    {{form_row(formAssignation.commentaire)}}
                    {{form_widget(formAssignation.submit)}}
                    <div style="display:none;">
                    {{form_widget(formAssignation.forfait, {'attr':{'value':'0'}})}}
                    {{form_widget(formAssignation)}}
                    </div>
                    {{form_end(formAssignation)}}
                </div>
                </div>
            </div>
        </div>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    document.querySelector('.profile-img').addEventListener('click', function() {
        document.getElementById('{{ formCandidate.file.vars.id }}').click();
    });
    document.getElementById('submitButton').addEventListener('click', function() {
        document.getElementById('formCandidate').submit();
        document.getElementById('formCvCandidate').submit();
    });
    function confirmChange(selectElement) {
        if (confirm('Êtes-vous sûr de vouloir changer le statut du candidat ?')) {
            selectElement.form.submit();
        } else {
            // Réinitialise la sélection à la valeur précédente si l'utilisateur annule
            selectElement.value = selectElement.getAttribute('data-previous');
        }
    }

    document.getElementById('{{ formCandidate.file.vars.id }}').addEventListener('change', function(event) {
        if (event.target.files && event.target.files[0]) {
            var reader = new FileReader();
            reader.onload = function(e) {
                document.querySelector('.profile-img').src = e.target.result;
            };
            reader.readAsDataURL(event.target.files[0]);
        }
    });
	document.addEventListener("DOMContentLoaded", function() {
	// Get the dropdown and date input elements
	var availabilityDropdown = document.getElementById('candidat_availability_nom');
	var dateField = document.getElementById('candidat_availability_dateFin');

	// Function to enable/disable date input
	function toggleDateInput() {
		// Check if the selected option is "A partir du"
		if (availabilityDropdown.value === 'from-date') {
		dateField.style.display = '';  // Show the date field
		} else {
		dateField.style.display = 'none';  // Hide the date field
		}
	}

	// Attach change event listener to the dropdown
	availabilityDropdown.addEventListener('change', toggleDateInput);

	// Initial check in case the page loads with "A partir du" already selected
	toggleDateInput();
});
</script>
<script>
    $(document).ready(function() {
        var originalContent = {}; 
        // Fonction pour sauvegarder le contenu original d'un élément
        function saveOriginalContent(id, containerSelector) {
            var container = $(containerSelector);
            originalContent[id] = container.html();
        }
        // Gestionnaire d'événements pour "edit-competence"
        $('.edit-competence').click(function(e) {
            e.preventDefault();
            var competenceId = $(this).data('competence-id');
            var competenceContainer = $('[data-competence-id="' + competenceId + '"]').closest('.competence');
            
            saveOriginalContent(competenceId, competenceContainer); // Sauvegarde du contenu original
    
            // Votre code AJAX...
            $.ajax({
                url: "{{ path('app_ajax_edit_competence')}}",
                method: 'POST',
                data: { competence_id: competenceId },
                success: function(response) {
                    console.log(response)
                    // Si la demande réussit, affichez un formulaire de modification
                    if (response.success) {
                        // Remplacez le contenu de l'expérience par le formulaire de modification pré-rempli
                        var competenceContainer = $('[data-competence-id="' + competenceId + '"]').closest('.competence');
                        competenceContainer.html(response.form); // Assurez-vous que la réponse contient uniquement le formulaire HTML              
                    }
                },
                error: function(error) {
                    console.error('Erreur lors de la récupération des données de l\'expérience :', error);
                }
            });
        });
    
        $('.delete-competence').click(function(e) {
            e.preventDefault()
            var competenceId = $(this).data('competence-id');
            console.log(competenceId)
            // Envoyez une demande AJAX pour supprimer l'expérience
            $.ajax({
                url: "{{ path('app_ajax_delete_competence')}}",
                method: 'POST',
                data: { competence_id: competenceId },
                success: function(response) {
                    console.log(response)
                    // Si la suppression réussit, supprimez l'expérience du DOM
                    if (response.success) {
						$('#competence-row-' + competenceId).remove();
					}
                },
                error: function(error) {
                    console.error('Erreur lors de la suppression de l\'expérience :', error);
                }
            });
        });

    
        // Gestionnaire d'événements pour "edit-experience"
        $('.edit-experience').click(function(e) {
            e.preventDefault();
            var experienceId = $(this).data('experience-id');
            var experienceContainer = $('[data-experience-id="' + experienceId + '"]').closest('.experience');
            
            saveOriginalContent(experienceId, experienceContainer); // Sauvegarde du contenu original
    
            // Votre code AJAX...
            $.ajax({
                url: "{{ path('app_ajax_edit_experience')}}",
                method: 'POST',
                data: { experience_id: experienceId },
                success: function(response) {
                    console.log(response)
                    // Si la demande réussit, affichez un formulaire de modification
                    if (response.success) {
                        // Remplacez le contenu de l'expérience par le formulaire de modification pré-rempli
                        var experienceContainer = $('[data-experience-id="' + experienceId + '"]').closest('.experience');
                        experienceContainer.html(response.form); // Assurez-vous que la réponse contient uniquement le formulaire HTML
                    }
                },
                error: function(error) {
                    console.error('Erreur lors de la récupération des données de l\'expérience :', error);
                }
            });
        });
        $('.delete-experience').click(function(e) {
            e.preventDefault()
            var experienceId = $(this).data('experience-id');
            console.log(experienceId)
            // Envoyez une demande AJAX pour supprimer l'expérience
            $.ajax({
                url: "{{ path('app_ajax_delete_experience')}}",
                method: 'POST',
                data: { experience_id: experienceId },
                success: function(response) {
                    console.log(response)
                    // Si la suppression réussit, supprimez l'expérience du DOM
                    if (response.success) {
                        $('[data-experience-id="' + experienceId + '"]').closest('.experience').remove();
                    }
                },
                error: function(error) {
                    console.error('Erreur lors de la suppression de l\'expérience :', error);
                }
            });
        });
        // Gestionnaire d'événements pour "edit-application"
        $('.edit-application').click(function(e) {
            e.preventDefault();
            var applicationId = $(this).data('application-id');
            var experienceContainer = $('[data-application-id="' + applicationId + '"]').closest('.application');
            
            saveOriginalContent(applicationId, experienceContainer); // Sauvegarde du contenu original
    
            // Votre code AJAX...
            $.ajax({
                url: "{{ path('app_ajax_edit_application')}}",
                method: 'POST',
                data: { application_id: applicationId },
                success: function(response) {
                    console.log(response)
                    // Si la demande réussit, affichez un formulaire de modification
                    if (response) {
                        // Remplacez le contenu de l'expérience par le formulaire de modification pré-rempli
                        var experienceContainer = $('[data-application-id="' + applicationId + '"]').closest('.applications');
                    	console.log(experienceContainer)
						experienceContainer.html(response.form); // Assurez-vous que la réponse contient uniquement le formulaire HTML
                    }
                },
                error: function(error) {
                    console.error('Erreur lors de la récupération des données de l\'expérience :', error);
                }
            });
        });
        $('.delete-application').click(function(e) {
            e.preventDefault()
            var applicationId = $(this).data('application-id');
            console.log(applicationId)
            // Envoyez une demande AJAX pour supprimer l'expérience
            $.ajax({
                url: "{{ path('app_ajax_delete_application')}}",
                method: 'POST',
                data: { experience_id: applicationId },
                success: function(response) {
                    console.log(response)
                    // Si la suppression réussit, supprimez l'expérience du DOM
                    if (response.success) {
                        $('[data-application-id="' + applicationId + '"]').closest('.application').remove();
                    }
                },
                error: function(error) {
                    console.error('Erreur lors de la suppression de l\'expérience :', error);
                }
            });
        });

		$(document).on('click', '.edit-assignation', function(e) {
			console.log('eto');
			e.preventDefault();
			var assignationId = $(this).data('assignation-id');
			var assignationContainer = $('[data-assignation-id="' + assignationId + '"]').closest('.assignation');
			
			saveOriginalContent(assignationId, assignationContainer); // Sauvegarde du contenu original

			$.ajax({
				url: "{{ path('app_ajax_edit_assignation') }}",
				method: 'POST',
				data: { assignation_id: assignationId },
				success: function(response) {
					console.log(response.form);
					// Si la demande réussit, affichez un formulaire de modification
					if (response.success) {
						// Remplacez le contenu de l'expérience par le formulaire de modification pré-rempli
						var assignationContainer = $('[data-assignation-id="' + assignationId + '"]').closest('.assignation');
						
						// Utilisez replaceWith pour remplacer l'élément assignation par le formulaire complet
						assignationContainer.replaceWith(response.form); // Assurez-vous que la réponse contient uniquement le formulaire HTML 
						console.log(assignationContainer);
					}
				},
				error: function(error) {
					console.error('Erreur lors de la récupération des données de l\'expérience :', error);
				}
			});
		});

		$(document).on('click', '.cancel-assignation', function(e) {
			e.preventDefault();

			var container = $(this).closest('.assignation');
			var id = container.data('assignation-id');

			if (id) {
				restoreOriginalContent(id, container);
			} else {
				console.log('ID non trouvé.');
			}
		});

        $(document).on('click', '.cancel-experience', function(e) {
            e.preventDefault();

            var container = $(this).closest('.experience');
            var id = container.data('experience-id');

            if (id) {
                restoreOriginalContent(id, container);
            } else {
                console.log('ID non trouvé.');
            }
        });

		$(document).on('click', '.cancel-applications', function(e) {
			e.preventDefault();

			var container = $(this).closest('.applications');
			var id = container.data('application-id');

			if (id) {
				restoreOriginalContent(id, container);
			} else {
				console.log('ID non trouvé.');
			}
		});
        $('#generate-resume').on('click', function() {
            var candidateId = $(this).data('candidat-id');

            // Hide the button and show the progress bar
            $(this).hide();
            $('#progress-container').show();

            // Initialize the progress bar
            updateProgressBar(0);

            // Function to update the progress bar
            function updateProgressBar(percentage) {
                $('#progress-bar').css('width', percentage + '%').attr('aria-valuenow', percentage).text(percentage + '%');
            }

            // Simulate progress update (this is just for demonstration)
            let progress = 0;
            let interval = setInterval(function() {
                if (progress < 90) {
                    progress += 5;
                    updateProgressBar(progress);
                } else {
                    clearInterval(interval);
                }
            }, 3600);

            // Make the AJAX request
            $.ajax({
                url: '/api/openai/generate/' + candidateId,
                method: 'GET',
                success: function(response) {
                    console.log(response)
                    // Complete the progress bar
                    updateProgressBar(100);

                    setTimeout(function() {
                        // Hide the progress bar and show a success message
                        $('#progress-container').hide();
                        if (response.status === 'success') {
                            alert(response.message);
                        } else {
                            alert('Une erreur est survenue');
                        }
                        location.reload(); // Optionally reload the page or redirect
                    }, 500); // Add a small delay to show the 100% state
                },
                error: function(xhr, status, error) {
                    // Hide the progress bar and show an error message
                    $('#progress-container').hide();
                    let errorMessage = 'Une erreur est survenue: ' + (xhr.responseJSON ? xhr.responseJSON.message : error);
                    alert(errorMessage);
                    $('#generate-resume').show(); // Show the button again in case of error
                }
            });
        });


        // Fonction pour restaurer le contenu original
        function restoreOriginalContent(id, containerSelector) {
            console.log(id)
            var container = $(containerSelector);
            if (originalContent[id]) {
                container.html(originalContent[id]);
            }
        }
    });
</script>

{% endblock %}
