{% extends 'base_v21.html.twig' %}

{% block title %}
  Recharger mes crédits | Olona Talents
{% endblock %}

{% block meta %}
	{{ parent() }}
{% endblock %}

{% block stylesheets %}
	{{ parent() }}
{% endblock %}

{% block sidebar %}

{% if app.user.type is defined and app.user.type is same as(constant('App\\Entity\\User::ACCOUNT_CANDIDAT')) %}
	{% include "v2/dashboard/layout_candidat.html.twig" %}
{% else %}
	{% include "v2/dashboard/layout_entreprise.html.twig" %}
{% endif %}

{% endblock %}


{% block body %}
<section class="">
  <div class="shadow p-3 p-sm-5">
    <h2 class="mb-4">Recapitulatif de la commande</h2>
    <div class="my-3 p-5 border rounded row">
      <h3 class="mb-4 fw-bold">{{ pack.name }}</h3>
      <div class="col-3">
        <span class="fs-5">Produit</span> :<br>
        <span class="fs-5">Prix</span> :<br>
        <span class="fs-5">Crédits</span> : <br>
      </div>
      <div class="col-9">
        <span class="fw-bold fs-5">{{ pack.name }}</span><br>
        <span class="fw-bold fs-5">{{ pack.price }} Ar ( {{ price }} € )</span><br>
        <span class="fw-bold fs-5">{{ pack.credit }}</span><br>
      </div>
    </div>
    <div class="col-6 mx-auto mt-3">
      <div id="paypal-button-container"></div>
      <div id="message-container" style="display:none;" class="text-center border rounded p-3"></div>
    </div>

    {{ form_start(form, {'attr': {'data-turbo': 'false'}}) }}
    
          <div class="row justify-content-center text-center mx-auto" id="mobileMoney">
            {% for type in form.paymentMethod %}
              <div class="col-md-3">
                  <div class="custom-control custom-radio image-checkbox photo-gris">
                      {{ form_widget(type, {'attr': {'class': 'custom-control-input'}}) }}
                      <label class="custom-control-label" for="{{ type.vars.id }}">
                          <img src="{{ asset('/images/' ~ type.vars.id ~ '.png') }}" class="img-fluid border" alt="{{ type.vars.label }}">
                      </label>
                  </div>
              </div>
            {% endfor %}
          </div> 
    <div style="display:none;">
    {{ form_widget(form)}}
    </div>
      <div class=" text-center mx-auto">
        <button type="submit" id="mobileMoneySubmit" disabled class="btn btn-lg btn-primary fw-semibold text-uppercase px-5 my-5">Valider ma commande</button>
      </div>
    {{ form_end(form) }}
  </div>


<script>
document.addEventListener('turbo:load', function () {
    
    console.log('DOM fully loaded and parsed');
    loadPaypalSdk().then(() => {
        initializePaypalButtons();
        console.log('PayPal SDK loaded and buttons initialized');
    }).catch(error => {
        console.error("Erreur lors du chargement du SDK PayPal:", error);
    });
});

function resultMessage(message) {
    console.log(message);
    const messageContainer = document.getElementById('message-container');
    if (messageContainer) {
        messageContainer.innerHTML = message;
        messageContainer.style.display = 'block';
    } else {
        console.error('Message container not found', message);
        // Vous pouvez également envisager d'ajouter une alternative de fallback ici
        // Par exemple, créer dynamiquement l'élément s'il n'existe pas
        createMessageContainer(message);
    }
}

function createMessageContainer(message) {
    const container = document.createElement('div');
    container.id = 'message-container';
    container.style.display = 'block';
    container.innerHTML = message;
    document.body.appendChild(container);  // Changez cela en fonction de l'endroit où vous voulez l'ajouter
}

async function saveTransaction(orderData) {
    try {
        const token = await getAuthToken();

        const response = await fetch('{{ path('app_v2_user_order_save', {'pack': pack.slug, 'id': app.user.id })}}', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}` 
            },
            body: JSON.stringify(orderData),
        });

        if (!response.ok) {
            throw new Error('Failed to save transaction');
        }

        const data = await response.json();
        console.log('Transaction saved:', data);
    } catch (error) {
        console.error('Error saving transaction:', error);
    }
}

async function getAuthToken() {
    try {
        const response = await fetch('{{ path('api_login_check')}}', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                username: 'miandrisoa.olona@gmail.com',
                password: 'HY9Hk86c',
            }),
        });

        if (!response.ok) {
            throw new Error('Failed to fetch token');
        }

        const data = await response.json();
        return data.token; 
    } catch (error) {
        console.error('Error obtaining token:', error);
        throw error;
    }
}

function loadPaypalSdk() {
    return new Promise((resolve, reject) => {
        if (window.paypal) {
            resolve();
        } else {
            const script = document.createElement('script');
            script.src = "https://www.paypal.com/sdk/js?client-id=ASu3tyl5NCMVfnQ9_wcXD3bv-Pn7nIOhXwkrjisQorZEIdQzr3Z4FOMq3AlmeKiBJcedrMuJPpdTKFAK&components=buttons&enable-funding=venmo,paylater&currency=EUR";
            script.onload = () => resolve();
            script.onerror = () => reject(new Error('Échec du chargement du SDK PayPal'));
            document.head.appendChild(script);
        }
    });
}

function initializePaypalButtons() {

    window.paypal
    .Buttons({
        style: {
            layout: "vertical",
            color: "gold",
            label: "paypal",
        },
        message: {
            amount: {{ price }},
        } ,

        async createOrder() {
            try {
                const response = await fetch("https://node.olona-talents.com/api/orders", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({
                        cart: [
                            {
                                id: "{{pack.slug}}", 
                                name: "{{pack.name}}",
                                quantity: 1,          
                                price: {{ price }},   
                                currency: "EUR",      
                            },
                        ],
                    }),
                });

                const orderData = await response.json();

                if (orderData.id) {
                    return orderData.id;
                }
                const errorDetail = orderData?.details?.[0];
                const errorMessage = errorDetail
                    ? `${errorDetail.issue} ${errorDetail.description} (${orderData.debug_id})`
                    : JSON.stringify(orderData);

                throw new Error(errorMessage);
            } catch (error) {
                console.error(error);
                resultMessage(`Impossible d'initier le paiement PayPal...<br>${error}`);
            }
        } ,

        async onApprove(data, actions) {
            try {
                const response = await fetch(
                    `https://node.olona-talents.com/api/orders/${data.orderID}/capture`,
                    {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                        },
                    }
                );

                const orderData = await response.json();
                const errorDetail = orderData?.details?.[0];

                if (errorDetail?.issue === "INSTRUMENT_DECLINED") {
                    return actions.restart();
                } else if (errorDetail) {
                    throw new Error(
                        `${errorDetail.description} (${orderData.debug_id})`
                    );
                } else if (!orderData.purchase_units) {
                    throw new Error(JSON.stringify(orderData));
                } else {
                    const transaction =
                        orderData?.purchase_units?.[0]?.payments
                            ?.captures?.[0] ||
                        orderData?.purchase_units?.[0]?.payments
                            ?.authorizations?.[0];
                    resultMessage(
                        `Transaction ${transaction.status}: ${transaction.id}`
                    );
                    console.log(
                        "Capture result",
                        orderData,
                        JSON.stringify(orderData, null, 2)
                    );
                    await saveTransaction(orderData);
                }
            } catch (error) {
                console.error(error);
                resultMessage(
                    `Désolé, votre transaction n'a pas pu être traitée...<br>${error}`
                );
            }
        } ,
    })
    .render("#paypal-button-container"); 

}
</script>
</section>
{% endblock %}